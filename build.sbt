import sbt.librarymanagement.Configurations.{IntegrationTest, Test}

lazy val common = (project in file("common"))
  .settings(CompilerSettings.settings)
  .settings(libraryDependencies ++= Dependencies.commonDependencies)
  .configs(IntegrationTest)
  .settings(inConfig(IntegrationTest)(org.scalafmt.sbt.ScalafmtPlugin.scalafmtConfigSettings))
  .settings(Defaults.itSettings)
  .settings(IntegrationTest / internalDependencyClasspath += Attributed.blank((Test / classDirectory).value))
  .settings(IntegrationTest / parallelExecution := false)

lazy val publicApi = (project in file("public-api"))
  .settings(CompilerSettings.settings)
  .settings(libraryDependencies ++= Dependencies.publicApiDependencies)
  .configs(IntegrationTest)
  .settings(inConfig(IntegrationTest)(org.scalafmt.sbt.ScalafmtPlugin.scalafmtConfigSettings))
  .settings(Defaults.itSettings)
  .settings(IntegrationTest / internalDependencyClasspath += Attributed.blank((Test / classDirectory).value))
  .settings(IntegrationTest / parallelExecution := false)
  .dependsOn(common % "test->test;it->test;it->it;compile->compile")
  .aggregate(common)

lazy val crawler = (project in file("crawler"))
  .settings(CompilerSettings.settings)
  .settings(libraryDependencies ++= Dependencies.crawlerDependencies)
  .configs(IntegrationTest)
  .settings(inConfig(IntegrationTest)(org.scalafmt.sbt.ScalafmtPlugin.scalafmtConfigSettings))
  .settings(Defaults.itSettings)
  .settings(IntegrationTest / internalDependencyClasspath += Attributed.blank((Test / classDirectory).value))
  .settings(IntegrationTest / parallelExecution := false)
  .dependsOn(common % "test->test;it->test;it->it;compile->compile")
  .aggregate(common)
  .enablePlugins(UniversalPlugin, JavaServerAppPackaging, SystemdPlugin)

